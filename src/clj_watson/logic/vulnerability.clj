(ns clj-watson.logic.vulnerability
  (:require [clj-watson.logic.version :as logic.version])
  (:import (org.owasp.dependencycheck.dependency Vulnerability)))

(defn ^:private cvssv2 [vulnerability]
  (try
    (some-> vulnerability .getCvssV2 .getScore)
    (catch Exception _
      nil)))

(defn ^:private cvssv3 [vulnerability]
  (try
    (some-> vulnerability .getCvssV3 .getBaseScore)
    (catch Exception _
      nil)))

(defn ^:private cwes [vulnerability]
  (some->> vulnerability .getCwes .getFullCwes keys set))

(defn ^:private versions [vulnerability]
  (let [vulnerable-software (.getMatchedVulnerableSoftware vulnerability)]
    {:version-end-excluding   (.getVersionEndExcluding vulnerable-software)
     :version-start-excluding (.getVersionStartExcluding vulnerable-software)
     :version-end-including   (.getVersionEndIncluding vulnerable-software)
     :version-start-including (.getVersionStartIncluding vulnerable-software)}))

(defn get-information
  [^String current-version ^Vulnerability vulnerability]
  (let [versions (versions vulnerability)
        cpe-version (-> vulnerability .getMatchedVulnerableSoftware .getVersion)]
    (when (logic.version/vulnerable? current-version cpe-version versions)
      (-> (assoc {} :name (.getName vulnerability))
          (assoc :cvssv2 (cvssv2 vulnerability))
          (assoc :cvssv3 (cvssv3 vulnerability))
          (assoc :cwes (cwes vulnerability))
          (assoc :cpe-version cpe-version)
          (merge versions)))))